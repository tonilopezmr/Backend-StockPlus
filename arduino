#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <ESP8266HTTPClient.h>


ESP8266WebServer server(80);

const int led = 16;
int IS_HIGH = 0;

const uint16_t port = 8080;
const char * host = "localhost"; // ip or dns


void handleRoot() {
  server.send(200, "text/plain", getBoolString(IS_HIGH));
  IS_HIGH = !IS_HIGH;
  digitalWrite(led, IS_HIGH);
}

void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}

String getBoolString(state) {
  if(state) {
    return "true";
   } else {
    return "false";
   }
}

void registerDevice(mac, ip) {
  HTTPClient http;
  http.begin("http://localhost:8080/v1/iot/new");
  http.setAuthorization("saymyname", "youarejohn");
  http.addHeader("Content-Type", "application/json");
  int httpCode = http.POST("{\"mac\": \""+ mac +"\", \"ip\": \""+ ip +"\", \"online\": true,\"state\": false}");
  if(httpCode == 200) {
    Serial.println("Register successfully");
  }
}

void setup(void) {
   int cnt = 0;
   Serial.begin(115200);
  /* Set ESP8266 to WiFi Station mode */
  WiFi.mode(WIFI_STA);

  while(WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if(cnt++ >= 10){
       WiFi.beginSmartConfig();
       while(1){
           delay(1000);
           if(WiFi.smartConfigDone()){
             Serial.println("SmartConfig Success");
             break;
           }
       }
    }
  }

  Serial.println("WiFi Connected.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
  Serial.print("MAC Address: ");
  Serial.println(WiFi.macAddress());

  registerDevice(WiFi.macAddress(), WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);
  server.on("/health", []() {
    server.send(200, "text/plain", "this works as well");
  });

  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");

  pinMode(led, OUTPUT);
}

void loop(void) {
  server.handleClient();
}